diff --git a/src/platform.c b/src/platform.c
index 7596631..75aecc1 100644
--- a/src/platform.c
+++ b/src/platform.c
@@ -1,8 +1,8 @@
 /*
  * This file is part of the Black Magic Debug project.
  *
- * Copyright (C) 2011  Black Sphere Technologies Ltd.
- * Written by Gareth McMullin <gareth@blacksphere.co.nz>
+ * Copyright (C) 2011-2021 Black Sphere Technologies Ltd.
+ * Portions (C) 2020-2021 Stoyan Shopov <stoyan.shopov@gmail.com>
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -18,184 +18,286 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
-/* This file implements the platform specific functions for the ST-Link
+/* This file provides the platform specific functions for the ST-Link V3
  * implementation.
  */
 
 #include "general.h"
 #include "cdcacm.h"
 #include "usbuart.h"
+#include "gdb_if.h"
 
 #include <libopencm3/stm32/rcc.h>
-#include <libopencm3/cm3/systick.h>
 #include <libopencm3/cm3/scb.h>
 #include <libopencm3/cm3/scs.h>
 #include <libopencm3/cm3/nvic.h>
 #include <libopencm3/stm32/usart.h>
 #include <libopencm3/usb/usbd.h>
 #include <libopencm3/stm32/adc.h>
-
-uint8_t running_status;
+#include <libopencm3/stm32/spi.h>
+#include <libopencm3/stm32/adc.h>
+#include <libopencm3/stm32/exti.h>
+#include <libopencm3/stm32/syscfg.h>
 
 uint16_t led_idle_run;
-static uint32_t rev;
+uint16_t srst_pin;
+static uint32_t hw_version;
 
-int platform_hwversion(void)
+#define SCB_CCR_IC_Pos                      17U                                           /*!< SCB CCR: Instruction cache enable bit Position */
+#define SCB_CCR_IC_Msk                     (1UL << SCB_CCR_IC_Pos)                        /*!< SCB CCR: Instruction cache enable bit Mask */
+
+#define SCB_CCR_DC_Pos                      16U                                           /*!< SCB CCR: Cache enable bit Position */
+#define SCB_CCR_DC_Msk                     (1UL << SCB_CCR_DC_Pos)                        /*!< SCB CCR: DC Mask */
+
+#define SCB_CCSIDR_NUMSETS_Msk             (0x7FFFUL << SCB_CCSIDR_NUMSETS_Pos)           /*!< SCB CCSIDR: NumSets Mask */
+#define SCB_CCSIDR_NUMSETS_Pos             13U                                            /*!< SCB CCSIDR: NumSets Position */
+
+#define SCB_CCSIDR_ASSOCIATIVITY_Pos        3U                                            /*!< SCB CCSIDR: Associativity Position */
+#define SCB_CCSIDR_ASSOCIATIVITY_Msk       (0x3FFUL << SCB_CCSIDR_ASSOCIATIVITY_Pos)      /*!< SCB CCSIDR: Associativity Mask */
+#define CCSIDR_WAYS(x)         (((x) & SCB_CCSIDR_ASSOCIATIVITY_Msk) >> SCB_CCSIDR_ASSOCIATIVITY_Pos)
+
+#define SCB_DCISW_SET_Pos                   5U                                            /*!< SCB DCISW: Set Position */
+#define SCB_DCISW_SET_Msk                  (0x1FFUL << SCB_DCISW_SET_Pos)                 /*!< SCB DCISW: Set Mask */
+
+#define SCB_DCISW_WAY_Pos                  30U                                            /*!< SCB DCISW: Way Position */
+#define SCB_DCISW_WAY_Msk                  (3UL << SCB_DCISW_WAY_Pos)                     /*!< SCB DCISW: Way Mask */
+
+#define CCSIDR_SETS(x)         (((x) & SCB_CCSIDR_NUMSETS_Msk      ) >> SCB_CCSIDR_NUMSETS_Pos      )
+
+static void __DSB(void)
 {
-	return rev;
+	asm volatile ("dsb 0xF":::"memory");
 }
 
-/* return 0 for stlink V1, 1 for stlink V2 and 2 for stlink V2.1 */
-uint32_t detect_rev(void)
+static void __ISB(void)
 {
-	uint32_t rev;
-	int res;
-
-	while (RCC_CFGR & 0xf) /* Switch back to HSI. */
-		RCC_CFGR &= ~3;
-	rcc_periph_clock_enable(RCC_GPIOA);
-	rcc_periph_clock_enable(RCC_GPIOB);
-	rcc_periph_clock_enable(RCC_GPIOC);
-	rcc_periph_clock_enable(RCC_USB);
-	rcc_periph_reset_pulse(RST_USB);
-	rcc_periph_clock_enable(RCC_AFIO);
-	rcc_periph_clock_enable(RCC_CRC);
-	/* First, get Board revision by pulling PC13/14 up. Read
-	 *  11 for ST-Link V1, e.g. on VL Discovery, tag as rev 0
-	 *  00 for ST-Link V2, e.g. on F4 Discovery, tag as rev 1
-	 *  01 for ST-Link V2, else,                 tag as rev 1
-	 */
-	gpio_set_mode(GPIOC, GPIO_MODE_INPUT,
-				  GPIO_CNF_INPUT_PULL_UPDOWN, GPIO14 | GPIO13);
-	gpio_set(GPIOC, GPIO14 | GPIO13);
-	for (int i = 0; i < 100; i ++)
-		res = gpio_get(GPIOC, GPIO13);
-	if (res)
-		rev = 0;
-	else {
-		/* Check for V2.1 boards.
-		 * PA15/TDI is USE_RENUM, pulled with 10 k to U5V on V2.1,
-		 * Otherwise unconnected. Enable pull low. If still high.
-		 * it is V2.1.*/
-		rcc_periph_clock_enable(RCC_AFIO);
-		AFIO_MAPR |= 0x02000000; /* Release from TDI.*/
-		gpio_set_mode(GPIOA, GPIO_MODE_INPUT,
-                                 GPIO_CNF_INPUT_PULL_UPDOWN, GPIO15);
-		gpio_clear(GPIOA, GPIO15);
-		for (int i = 0; i < 100; i++)
-			res =  gpio_get(GPIOA, GPIO15);
-		if (res) {
-			rev = 2;
-			/* Pull PWR_ENn low.*/
-			gpio_set_mode(GPIOB, GPIO_MODE_OUTPUT_2_MHZ,
-						  GPIO_CNF_OUTPUT_OPENDRAIN, GPIO15);
-			gpio_clear(GPIOB, GPIO15);
-			/* Pull USB_RENUM low!*/
-			gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_2_MHZ,
-						  GPIO_CNF_OUTPUT_OPENDRAIN, GPIO15);
-			gpio_clear(GPIOA, GPIO15);
-		} else
-			/* Catch F4 Disco board with both resistors fitted.*/
-			rev = 1;
-		/* On Rev > 0 unconditionally activate MCO on PORTA8 with HSE! */
-		RCC_CFGR &= ~(0xf << 24);
-		RCC_CFGR |= (RCC_CFGR_MCO_HSE << 24);
-		gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_50_MHZ,
-		GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, GPIO8);
-	}
-	if (rev < 2) {
-		gpio_clear(GPIOA, GPIO12);
-		gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_2_MHZ,
-					  GPIO_CNF_OUTPUT_OPENDRAIN, GPIO12);
-	}
-	return rev;
+	asm volatile ("isb 0xF":::"memory");
 }
 
-void platform_request_boot(void)
+static void SCB_EnableICache (void)
 {
-	uint32_t crl = GPIOA_CRL;
-	/* Assert bootloader marker.
-	 * Enable Pull on GPIOA1. We don't rely on the external pin
-	 * really pulled, but only on the value of the CNF register
-	 * changed from the reset value
-	 */
-	crl &= 0xffffff0f;
-	crl |= 0x80;
-	GPIOA_CRL = crl;
-	SCB_VTOR = 0;
+	volatile uint32_t *SCB_ICIALLU =  (volatile uint32_t *)(SCB_BASE + 0x250);
+	__DSB();
+	__ISB();
+	*SCB_ICIALLU = 0UL;                     /* invalidate I-Cache */
+	__DSB();
+	__ISB();
+	SCB_CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
+	__DSB();
+	__ISB();
 }
-void platform_init(void)
+
+static void SCB_EnableDCache (void)
 {
-	rev = detect_rev();
-	SCS_DEMCR |= SCS_DEMCR_VC_MON_EN;
-#ifdef ENABLE_DEBUG
-	void initialise_monitor_handles(void);
-	initialise_monitor_handles();
-#endif
-	rcc_clock_setup_in_hse_8mhz_out_72mhz();
-	if (rev == 0) {
-		led_idle_run = GPIO8;
-	} else {
-		led_idle_run = GPIO9;
-	}
+	volatile uint32_t *SCB_CCSIDR = (volatile uint32_t *)(SCB_BASE +  0x80);
+	volatile uint32_t *SCB_CSSELR = (volatile uint32_t *)(SCB_BASE +  0x84);
+	volatile uint32_t *SCB_DCISW  =  (volatile uint32_t *)(SCB_BASE + 0x260);
 
-	gpio_set_mode(LED_PORT, GPIO_MODE_OUTPUT_2_MHZ,
-	              GPIO_CNF_OUTPUT_PUSHPULL, led_idle_run);
+	uint32_t ccsidr;
+	uint32_t sets;
+	uint32_t ways;
 
-	/* Relocate interrupt vector table here */
-	extern int vector_table;
-	SCB_VTOR = (uint32_t)&vector_table;
+	*SCB_CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
+	__DSB();
 
-	platform_timing_init();
-	if (rev > 1) /* Reconnect USB */
-		gpio_set(GPIOA, GPIO15);
-	cdcacm_init();
-	/* Don't enable UART if we're being debugged. */
-	if (!(SCS_DEMCR & SCS_DEMCR_TRCENA))
-		usbuart_init();
-}
+	ccsidr = *SCB_CCSIDR;
+
+	sets = (uint32_t)(CCSIDR_SETS(ccsidr));
+	do {
+		ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
+		do {
+			*SCB_DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
+					((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
+#if defined ( __CC_ARM )
+			__schedule_barrier();
+#endif
+		} while (ways-- != 0U);
+	} while(sets-- != 0U);
+	__DSB();
+
+	SCB_CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 
-uint8_t running_status;
-static volatile uint32_t time_ms;
+	__DSB();
+	__ISB();
+}
 
-void platform_timeout_set(platform_timeout *t, uint32_t ms)
+int platform_hwversion(void)
 {
-	t->time = platform_time_ms() + ms;
+	return hw_version;
 }
 
-bool platform_timeout_is_expired(platform_timeout *t)
+void platform_srst_set_val(bool assert)
 {
-	return platform_time_ms() > t->time;
+	gpio_set_val(SRST_PORT, SRST_PIN, !assert);
+	if (assert)
+		for(int i = 0; i < 10000; i++)
+			asm("nop");
 }
 
-void platform_timing_init(void)
+bool platform_srst_get_val()
 {
-	/* Setup heartbeat timer */
-	systick_set_clocksource(STK_CSR_CLKSOURCE_AHB_DIV8);
-	systick_set_reload(900000);	/* Interrupt us at 10 Hz */
-	SCB_SHPR(11) &= ~((15 << 4) & 0xff);
-	SCB_SHPR(11) |= ((14 << 4) & 0xff);
-	systick_interrupt_enable();
-	systick_counter_enable();
+	return gpio_get(SRST_PORT, SRST_PIN) == 0;
 }
 
-void platform_delay(uint32_t ms)
+/* GND_DETECT is pull low with 100R. Probably some task should
+ * pull is high, test and than immediate release */
+
+#define GND_DETECT_PORT GPIOG
+#define GND_DETECT_PIN  GPIO5
+void exti9_5_isr(void)
 {
-	platform_timeout timeout;
-	platform_timeout_set(&timeout, ms);
-	while (!platform_timeout_is_expired(&timeout));
+	exti_reset_request(EXTI5);
+	if (gpio_get(GND_DETECT_PORT, GND_DETECT_PIN)) {
+		gpio_mode_setup(TMS_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, TMS_PIN);
+		gpio_mode_setup(TCK_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, TCK_PIN);
+		gpio_mode_setup(TDI_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, TDI_PIN);
+		gpio_mode_setup(SRST_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, SRST_PIN);
+	} else {
+		gpio_mode_setup(TMS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, TMS_PIN);
+		gpio_mode_setup(TCK_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, TCK_PIN);
+		gpio_mode_setup(TDI_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, TDI_PIN);
+		gpio_mode_setup(SRST_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, SRST_PIN);
+	}
 }
 
-void sys_tick_handler(void)
+const char *platform_target_voltage(void)
 {
-	if(running_status)
-		gpio_toggle(LED_PORT, LED_IDLE_RUN);
+	/* On the stlinkv3, the target input voltage is divided by two.
+	 * The ADC is sampling at 12 bit resolution.
+	 * Vref+ input is assumed to be 3.3 volts. */
+	static char ret[] = "0.0V";
+	uint8_t channels[] = { ADC_CHANNEL0, };
+	unsigned value;
+
+	adc_set_regular_sequence(ADC1, 1, channels);
+	adc_start_conversion_regular(ADC1);
+	while (!adc_eoc(ADC1));
+	value = adc_read_regular(ADC1);
+
+	value *= 3379; /* 3.3 * 1024 == 3379.2 */
+	value += 104858; /* round, 0.05V * 2 ^ 21 == 104857.6 */
+	ret[0] = (value >> 21) + '0';
+	value &= (1 << 21) - 1;
+	value *= 10;
+	ret[2] = (value >> 21) + '0';
 
-	time_ms += 100;
+	return ret;
 }
 
-uint32_t platform_time_ms(void)
+void platform_request_boot(void)
 {
-	return time_ms;
+	/* Use top of ITCM RAM as magic marker*/
+	volatile uint32_t *magic = (volatile uint32_t *) 0x3ff8;
+	magic[0] = BOOTMAGIC0;
+	magic[1] = BOOTMAGIC1;
+	scb_reset_system();
 }
 
+void platform_init(void)
+{
+	rcc_periph_clock_enable(RCC_APB2ENR_SYSCFGEN);
+	rcc_clock_setup_hse(rcc_3v3 + RCC_CLOCK_3V3_216MHZ, 25);
+	SCB_EnableICache();
+	SCB_EnableDCache();
+	rcc_periph_clock_enable(RCC_GPIOA);
+	rcc_periph_clock_enable(RCC_GPIOB);
+	rcc_periph_clock_enable(RCC_GPIOD);
+	rcc_periph_clock_enable(RCC_GPIOH);
+	rcc_periph_clock_enable(RCC_GPIOF);
+	rcc_periph_clock_enable(RCC_GPIOG);
+
+	/* Initialize ADC. */
+	gpio_mode_setup(GPIOA, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, GPIO0);
+	rcc_periph_clock_enable(RCC_ADC1);
+	adc_power_off(ADC1);
+	adc_disable_scan_mode(ADC1);
+	adc_set_sample_time(ADC1, ADC_CHANNEL0, ADC_SMPR_SMP_3CYC);
+	adc_power_on(ADC1);
+
+
+	rcc_periph_clock_enable(RCC_SYSCFG);
+	gpio_mode_setup(GND_DETECT_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, GND_DETECT_PIN);
+	nvic_set_priority(NVIC_EXTI9_5_IRQ, 15);
+	nvic_enable_irq(NVIC_EXTI9_5_IRQ);
+	exti_select_source(EXTI5,  GPIOG);
+	exti_set_trigger(EXTI5, EXTI_TRIGGER_BOTH);
+	exti_enable_request(EXTI5);
+
+
+	/* Configure srst pin. */
+	gpio_set_output_options(SRST_PORT, GPIO_OTYPE_OD, GPIO_OSPEED_2MHZ, SRST_PIN);
+	gpio_mode_setup(SRST_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, SRST_PIN);
+	gpio_set(SRST_PORT, SRST_PIN);
+
+	gpio_mode_setup(TMS_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, TMS_PIN);
+	gpio_set_output_options(TMS_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, TMS_PIN);
+	gpio_mode_setup(SWDIO_IN_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SWDIO_IN_PIN);
+
+	/* Configure TDI pin. */
+	gpio_mode_setup(TDI_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, TDI_PIN);
+	gpio_set_output_options(TDI_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, TDI_PIN);
+
+	/* Drive the tck/swck pin low. */
+	gpio_mode_setup(TCK_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, TCK_PIN);
+	gpio_set_output_options(TCK_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, TCK_PIN);
+
+	/* Drive direction switch pin. */
+	gpio_mode_setup(TMS_DRIVE_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, TMS_DRIVE_PIN);
+	gpio_set_output_options(TMS_DRIVE_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, TMS_DRIVE_PIN);
+	gpio_set(TMS_DRIVE_PORT, TMS_DRIVE_PIN);
+
+#define PWR_EN_PORT GPIOB
+#define PWR_EN_PIN  GPIO0
+	gpio_mode_setup(PWR_EN_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, PWR_EN_PIN);
+	gpio_set_output_options(PWR_EN_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, PWR_EN_PIN);
+	gpio_set(PWR_EN_PORT, PWR_EN_PIN);
+
+	/* Set up MCO at 8 MHz on PA8 */
+#define MCO1_PORT GPIOA
+#define MCO1_PIN  GPIO8
+#define MCO1_AF   0
+	gpio_set_af    (MCO1_PORT, MCO1_AF, MCO1_PIN);
+	gpio_mode_setup(MCO1_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, MCO1_PIN);
+	gpio_set_output_options(MCO1_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, PWR_EN_PIN);
+	RCC_CR |= RCC_CR_HSION;
+	RCC_CFGR &= ~(0x3 << 21); /* HSI */
+	RCC_CFGR &= ~(0x7 << 24); /* no division */
+
+	/* Set up green/red led to steady green to indicate application active
+	 * FIXME: Allow RED and yellow constant and blinking,
+	 * e.g. by PWM onTIM1_CH3 (PA10)
+	 */
+	gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED_PIN);
+	gpio_set_output_options(LED_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ,
+							LED_PIN);
+	 gpio_set(LED_PORT, LED_PIN);
+
+//	gpio_toggle(GPIOA, GPIO10);
+//	gpio_toggle(GPIOA, GPIO10);
+	/* CAN Pins
+	 * Configure CAN pin: Slow.  OD and  PullUp for now.
+	 *
+	 * CAN1 is on APB1 with fCPU/4 => 54 MHz
+	 *
+	 *
+	 */
+#define CAN1_PORT GPIOA
+#define CAN1_PINS (GPIO11 | GPIO12)
+#define CAN1_AF 9
+	gpio_mode_setup(CAN1_PORT, GPIO_MODE_AF, GPIO_PUPD_PULLUP, CAN1_PINS);
+	gpio_set_output_options(CAN1_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ,
+							CAN1_PINS);
+	gpio_set_af    (CAN1_PORT, CAN1_AF, CAN1_PINS);
+
+	/* Relocate interrupt vector table here */
+	extern int vector_table;
+	SCB_VTOR = (uint32_t)&vector_table;
+
+	platform_timing_init();
+	cdcacm_init();
+	usbuart_init();
+	extern void slcan_init();
+	slcan_init();
+	/* By default, do not drive the swd bus too fast. */
+	platform_max_frequency_set(6000000);
+}
